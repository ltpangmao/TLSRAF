%%%%%%%%
% core %
%%%%%%%%

% Here we define that only targets that are not protected can be refined
% we use another step to determine whether there is a protection against the newly refined anti-goal
refined_anti_goal(TH, AS, TA2, unknown, AG) :- anti_goal(AG), has_properties(AG, TH, AS, TA1, false), and_refine(TA2, TA1), not non_leaf(AG).
refined_anti_goal(TH, AS, TA, true, AG) :- refined_anti_goal(TH, AS, TA, unknown, AG), protect(SM, TA), s_contribute(SM, SP), against(TH, SP).
refined_anti_goal(TH, AS, TA, false, AG) :- refined_anti_goal(TH, AS, TA, unknown, AG), not refined_anti_goal(TH, AS, TA, true, AG).


and_refined_anti_goal(TH, AS, TA2, unknown, AG) :- anti_goal(AG), has_properties(AG, TH, AS, TA1, false), refine(TA2, TA1), not non_leaf(AG).
and_refined_anti_goal(TH, AS, TA, true, AG) :- and_refined_anti_goal(TH, AS, TA, unknown, AG), protect(SM, TA), s_contribute(SM, SP), against(TH, SP).
and_refined_anti_goal(TH, AS, TA, false, AG) :- and_refined_anti_goal(TH, AS, TA, unknown, AG), not and_refined_anti_goal(TH, AS, TA, true, AG).

% in this work, we do distinguish "refine" and "operationalize", and we don't allow "and-operationalize", so the current rules only apply to these conditions
and_refined_anti_goal(TH, AS, TA2, unknown, AG) :- anti_goal(AG), has_properties(AG, TH, AS, TA1, false), operationalize(TA2, TA1), not non_leaf(AG).
and_refined_anti_goal(TH, AS, TA, true, AG) :- and_refined_anti_goal(TH, AS, TA, unknown, AG), protect(SM, TA), s_contribute(SM, SP), against(TH, SP).
and_refined_anti_goal(TH, AS, TA, false, AG) :- and_refined_anti_goal(TH, AS, TA, unknown, AG), not and_refined_anti_goal(TH, AS, TA, true, AG).





