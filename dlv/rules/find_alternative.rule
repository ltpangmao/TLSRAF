% normal rules
% each type of refinement is assigned with a particular inference rule, in order to clearly identify alterntives

% or-refine: enumerate up to 5 branches
satisfied(G2) :- refine_1(G2,G1), satisfied(G1).
satisfied(G2) v satisfied(G3) :- refine_2(G3,G2,G1), satisfied(G1).
satisfied(G2) v satisfied(G3) v satisfied(G4):- refine_3(G4,G3,G2,G1), satisfied(G1).
satisfied(G2) v satisfied(G3) v satisfied(G4) v satisfied(G5):- refine_4(G5,G4,G3,G2,G1), satisfied(G1).
satisfied(G2) v satisfied(G3) v satisfied(G4) v satisfied(G5) v satisfied(G6):- refine_5(G6,G5,G4,G3,G2,G1), satisfied(G1).

% and-refine: in this analysis, "and" actually doesn't matter the alternatives, so we don't need to distinguish them.
satisfied(G2) :- and_refine(G2,G1),satisfied(G1).



% auxiliary rules



% leaf goal identification
%non_leaf(G1):- and_refine(_,G1).
%non_leaf(G1):- refine_1(_,G1).
%non_leaf(G1):- refine_2(_,_,G1).
%non_leaf(G1):- refine_3(_,_,_,G1).
%non_leaf(G1):- refine_4(_,_,_,_,G1).
%non_leaf(G1):- refine_5(_,_,_,_,_,G1).


result(G1) :- satisfied(G1), sec_mechanism(G1).





