%% Auxiliary facts --- security attribute model
% general
isa(confidentiality, security).
isa(integrity, security).
isa(availability, security).
% specific
isa(data_confidentiality, confidentiality).
isa(data_integrity, integrity).
isa(service_integrity, integrity).
isa(application_integrity, integrity).
isa(hardware_integrity, integrity).
isa(data_availability, availability).
isa(service_availability, availability).
isa(application_availability, availability).
isa(hardware_availability, availability).

%%%% threat
%% Auxiliary facts --- threat mapping
against(information_disclosure,confidentiality).
against(tampering,integrity).
against(dos,availability).
%% Auxiliary rules --- threat mapping propagation
against(TH, SP2) :- against(TH, SP1), isa(SP2,SP1).


%%%% interval
%% Auxiliary rules --- descendants identification
is_descendent(R1, R2) :- and_refine(R1, R2).
is_descendent(R1, R2) :- refine(R1, R2).
is_descendent(R1, R2) :- operationalize(R1, R2).
is_descendent(R1, R3) :- is_descendent(R1, R2), is_descendent(R2, R3).
is_descendent(INT, all) :- interval(INT).
% this is used in the lower-layer analysis
is_descendent(R1, R2) :- support(R1, R2).
% this is used for depedency analysis
is_descendent(R2, R1) :- depend(R1, R2, _).


%% Auxiliary rules --- interval coverage
cover(INT2,INT1) :- is_descendent(INT1, INT2).

interval(T) :- task(T).
interval(G) :- goal(G).
cover(INT,INT) :- interval(INT).
%cover(INT1,INT3) :- cover(INT1,INT2), cover(INT2,INT3).



%%%% asset
is_descendent(A1, A2) :- part_of(A1, A2).
cover(A,A) :- asset(A).
%is_descendent(A1, A3) :- is_descendent(A1, A2), is_descendent(A2, A3).



%Applicability rules (mainly focusing on the asset types)
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, INT), data(AS), has_input(INT,AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_integrity, AS, INT), data(AS), has_input(INT,AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_availability, AS, INT), data(AS), has_input(INT,AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, INT), data(AS), has_output(INT,AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_integrity, AS, INT), data(AS), has_output(INT,AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_availability, AS, INT), data(AS), has_output(INT,AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, service_integrity, AS, _), service(AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, service_availability, AS, _), service(AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, application_integrity, AS, _), application(AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, application_availability, AS, _), application(AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, hardware_integrity, AS, _), hardware(AS).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, hardware_availability, AS, _), hardware(AS).

is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS1, INT), data(AS2), has_input(INT,AS2), cover(AS2, AS1).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_integrity, AS1, INT), data(AS2), has_input(INT,AS2), cover(AS2, AS1).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_availability, AS1, INT), data(AS2), has_input(INT,AS2), cover(AS2, AS1).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS1, INT), data(AS2), has_output(INT,AS2), cover(AS2, AS1).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_integrity, AS1, INT), data(AS2), has_output(INT,AS2), cover(AS2, AS1).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, data_availability, AS1, INT), data(AS2), has_output(INT,AS2), cover(AS2, AS1).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, service_integrity, AS, _), service(AS).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, service_availability, AS, _), service(AS).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, application_integrity, AS, _), application(AS).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, application_availability, AS, _), application(AS).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, hardware_integrity, AS, _), hardware(AS).
is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, hardware_availability, AS, _), hardware(AS).

% here we want to locate threats to security goals as detailed as possible
% Threaten rules
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, SP, AS1, INT1), threat(ID, TH, AS2, INT2), against(TH, SP), cover(INT2, INT1), cover(AS2, AS1).

% criticality rules
is_critical(SG,ID) :- is_applicable(SG), threatened_by(SG,ID).



%%%%%%%%%%%%%%%%%%%
% this is specially designed for application and hardware threat analysis, as we are missing data flow information, we assume the lower-layer artifacts inherit the data asset from the upper-layer
%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%
% this is specially designed for application and hardware threat analysis, as we are missing information, we assume all of them are vulnerable. So we define the following rules for "transferring threats".
% these rules are actually, the ones we previously identified...
% these rules are currently used to facilitate the analysis, will be further revised.
%%%%%%%%%%%%%%%%%%%%

% for security mechanism related security goal, still tricky, as we have to involve higher layer security goal which introduce more challegens...
threatened_by(SG1,TID) :- sec_goal(SG1), has_properties(SG1, _, application_integrity, AS1, INT1), threatened_by(SG2,TID), cover(SG2, INT1), threat(TID, information_disclosure, AS2, _), application(AS1), data(AS2).



% for security goal related security goal, application layer
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, application_integrity, AS1, INT1), threat(ID, information_disclosure, AS2, INT2), cover(INT2, INT1), application(AS1), data(AS2).
%
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, application_integrity, AS1, INT1), threat(ID, tampering, AS2, INT2), cover(INT2, INT1), application(AS1), data(AS2).
%
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, application_integrity, AS1, INT1), threat(ID, denial_of_service, AS2, INT2), cover(INT2, INT1), application(AS1), data(AS2).
%
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, application_availability, AS1, INT1), threat(ID, denial_of_service, AS2, INT2), cover(INT2, INT1), application(AS1), data(AS2).

% physical layer
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, hardware_integrity, AS1, INT1), threat(ID, information_disclosure, AS2, INT2), cover(INT2, INT1), hardware(AS1), data(AS2).
%
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, hardware_integrity, AS1, INT1), threat(ID, tampering, AS2, INT2), cover(INT2, INT1), hardware(AS1), data(AS2).
%
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, hardware_integrity, AS1, INT1), threat(ID, denial_of_service, AS2, INT2), cover(INT2, INT1), hardware(AS1), data(AS2).
%
threatened_by(SG,ID) :- sec_goal(SG), has_properties(SG, _, hardware_availability, AS1, INT1), threat(ID, denial_of_service, AS2, INT2), cover(INT2, INT1), hardware(AS1), data(AS2).










